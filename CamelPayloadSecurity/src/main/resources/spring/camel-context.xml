<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  	<import resource="classpath:spring/beans.xml" />
	<import resource="classpath:spring/services.cxf.xml" />

	<camel:keyStoreParameters id="keyStore" resource="./camel.jks" password="camelsec" />

	<camelContext id="findUserDataRoutes" xmlns="http://camel.apache.org/schema/spring">
		<dataFormats>
			<crypto id="des" algorithm="DES" keyRef="desKey" />
			<crypto id="aes" algorithm="AES" keyRef="aesKey" />

			<pgp id="asymEncrypt" keyFileName="./pubring.gpg" keyUserid="camel@trivadis.com" />
			<pgp id="asymDecrypt" keyFileName="./secring.gpg" keyUserid="camel@trivadis.com" password="camelsec" />
		</dataFormats>

		<!-- call this endpoint e.g. in soapUI or Eclipse Web Service Explorer with 1234567890 as ssn parameter value -->
		<route id="userDataEndpoint">
			<from uri="cxf:bean:userDataEndpoint" />

			<log message="userDataEndpoint operation: ${in.header.operationName}" />
			
			<!-- used for decryption later, avoids different operations in category web service -->
			<setHeader headerName="originalOperation">
				<simple>${in.header.operationName}</simple>
			</setHeader>
			
			<!-- body always consists of an Integer value only -->
			<convertBodyTo type="java.lang.Integer" />
			<bean ref="userDataBean" method="loadUserData" />
			
			<choice>
				<when>
					<simple>${in.header.operationName} == 'findUserDataSymEnc'</simple>
					<to uri="direct:findUserDataSymEnc" />
				</when>
				<when>
					<simple>${in.header.operationName} == 'findUserDataAsymEnc'</simple>
					<to uri="direct:findUserDataAsymEnc" />
				</when>
				<when>
					<simple>${in.header.operationName} == 'findUserDataSymEncXML'</simple>
					<to uri="direct:findUserDataSymEncXML" />
				</when>
				<when>
					<simple>${in.header.operationName} == 'findUserDataAsymEncXML'</simple>
					<to uri="direct:findUserDataAsymEncXML" />
				</when>
				<when>
					<simple>${in.header.operationName} == 'findUserDataSign'</simple>
					<to uri="direct:findUserDataSign" />
				</when>
			</choice>
			
			<to uri="direct:calculateCategory" />
		</route>
		
		<!-- this endpoint is expected to be unsafe, data must be encrypted in request -->
		<route id="categoryEndpoint">
			<from uri="cxf:bean:categoryEndpoint" />

			<log message="categoryEndpoint operation: ${in.header.operationName}" />
			
			<choice>
				<when>
					<simple>${in.header.operationName} == 'calculateCategory'</simple>
					<to uri="direct:calculateCategory" />
				</when>
			</choice>
		</route>

		<route id="findUserDataSymEnc">
			<from uri="direct:findUserDataSymEnc" />
			
			<convertBodyTo type="java.lang.String" />

			<marshal ref="aes" />

			<transform>
				<method bean="converter" method="convertToBase64" />
			</transform>
		</route>

		<route id="findUserDataAsymEnc">
			<from uri="direct:findUserDataAsymEnc" />
			
			<convertBodyTo type="java.lang.String" />

			<marshal ref="asymEncrypt" />

			<transform>
				<method bean="converter" method="convertToBase64" />
			</transform>
		</route>

		<route id="findUserDataSymEncXML">
			<from uri="direct:findUserDataSymEncXML" />

			<transform>
				<method bean="converter" method="convertToXml" />
			</transform>

			<marshal>
				<!-- 
					Attention: using 192 or 256 bit key size requires installation of the
					Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files
					http://www.oracle.com/technetwork/java/javase/downloads/index.html 
					Without installation, only 128 bit are available
				-->
				<secureXML secureTagContents="true"
					secureTag="/userData/socialSecurityNumber" xmlCipherAlgorithm="http://www.w3.org/2001/04/xmlenc#aes256-cbc"
					passPhrase="My own really secret key" />
			</marshal>
		</route>

		<route id="findUserDataAsymEncXML">
			<from uri="direct:findUserDataAsymEncXML" />

			<transform>
				<method bean="converter" method="convertToXml" />
			</transform>

			<marshal>
				<!-- 
					Attention: using 192 or 256 bit key size requires installation of the
					Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files
					http://www.oracle.com/technetwork/java/javase/downloads/index.html 
					Without installation, only 128 bit are available
				-->
				<secureXML secureTagContents="true"
					secureTag="/userData/socialSecurityNumber" xmlCipherAlgorithm="http://www.w3.org/2001/04/xmlenc#aes192-cbc"
					keyCipherAlgorithm="http://www.w3.org/2001/04/xmlenc#rsa-1_5"
					recipientKeyAlias="rsaCamelSec" keyOrTrustStoreParametersId="keyStore" />
			</marshal>
		</route>
		
		<route id="findUserDataSign">
		    <from uri="direct:findUserDataSign"/>
			
			<convertBodyTo type="java.lang.String" />
			
		    <to uri="crypto:sign://keystore?keystore=#signatureStore&amp;alias=camelsign&amp;password=camelsec" />
		</route> 

		<route id="calculateCategory">
			<from uri="direct:calculateCategory" />
			
			<log message="body in calculateCategory: ${body}" />
			<log message="header in calculateCategory: ${headers}" />
			<log message="original operation: ${in.header.originalOperation}" />
			
			<choice>
				<when>
					<simple>${in.header.originalOperation} == 'findUserData'</simple>	
					
					<bean ref="categoryBean" method="processData" />
				</when>
				<when>
					<simple>${in.header.originalOperation} == 'findUserDataSymEnc'</simple>			
					<transform> 
						<method bean="converter" method="convertToByte" /> 
					</transform> 
					
					<unmarshal ref="aes" />

					<transform>
						<method bean="converter" method="convertToUserData" />
					</transform>

					<bean ref="categoryBean" method="processData" />
					<convertBodyTo type="java.lang.String" />	
				</when>
				<when>
					<simple>${in.header.originalOperation} == 'findUserDataAsymEnc'</simple>
					<transform>
						<method bean="converter" method="convertToByte" />
					</transform>
						
					<unmarshal ref="asymDecrypt" />
					
					<transform>
						<method bean="converter" method="convertToUserData" />
					</transform>
					
					<bean ref="categoryBean" method="processData" />
					<convertBodyTo type="java.lang.String" />	
				</when>
				<when>
					<simple>${in.header.originalOperation} == 'findUserDataSymEncXML'</simple>
					<unmarshal>
						<secureXML secureTag="/userData/socialSecurityNumber"
							xmlCipherAlgorithm="http://www.w3.org/2001/04/xmlenc#aes256-cbc"
							passPhrase="My own really secret key" />
					</unmarshal>

					<transform>
						<method bean="converter" method="convertXmlToUserData" />
					</transform>
					
					<bean ref="categoryBean" method="processData" />
					<convertBodyTo type="java.lang.String" />	
				</when>
				<when>
					<simple>${in.header.originalOperation} == 'findUserDataAsymEncXML'</simple>
					<unmarshal>
						<secureXML secureTag="/userData/socialSecurityNumber"
							xmlCipherAlgorithm="http://www.w3.org/2001/04/xmlenc#aes256-cbc"
							keyCipherAlgorithm="http://www.w3.org/2001/04/xmlenc#rsa-1_5"
							recipientKeyAlias="rsaCamelSec" keyOrTrustStoreParametersId="keyStore" />
					</unmarshal>

					<transform>
						<method bean="converter" method="convertXmlToUserData" />
					</transform>
					
					<bean ref="categoryBean" method="processData" />
					<convertBodyTo type="java.lang.String" />	
				</when>
				<when>
					<simple>${in.header.originalOperation} == 'findUserDataSign'</simple>
		    		<to uri="crypto:verify://keystore?keystore=#signatureStore&amp;alias=camelsign" />

					<transform>
						<method bean="converter" method="convertToUserData" />
					</transform>

					<bean ref="categoryBean" method="processData" />
					<convertBodyTo type="java.lang.String" />	
				</when>
			</choice>	
		</route>
	</camelContext>

</beans>
